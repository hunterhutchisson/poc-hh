{"ast":null,"code":"var _jsxFileName = \"/Users/hunterhutchisson/inerg/poc-hh/src/components/ImgView.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadDropboxData } from \"../actions\";\nimport { Dropbox } from \"dropbox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ImgView(_ref) {\n  _s();\n\n  let {\n    handleViewContents\n  } = _ref;\n  const dispatch = useDispatch();\n  const fileArray = useSelector(state => state.dropbox.dropboxFileArray);\n  const imageArray = useSelector(state => state.dropbox.thumbnailArray);\n  const [imgThumbnail, setImgThumbnail] = useState(null);\n  const [imgThumbnailPath, setImgThumbnailPath] = useState(null);\n  useEffect(() => {\n    dispatch(loadDropboxData());\n  }, []);\n\n  const handleGetImg = path => {\n    if (!imgThumbnail || path != imgThumbnailPath) {\n      try {\n        let dbx = new Dropbox({\n          accessToken: ACC\n        });\n        dbx.filesGetThumbnailBatch({\n          entries: [{\n            path: `${path}`,\n            size: \"w1024h768\"\n          }]\n        }).then(res => {\n          console.log(res);\n          setImgThumbnail(`data:image/jpeg;base64, ${res.result.entries[0].thumbnail}`);\n          setImgThumbnailPath(path);\n        }).catch(function (error) {\n          console.error(error);\n        });\n      } catch (err) {\n        console.log('err:', err);\n      }\n    } else {\n      setImgThumbnail(null);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"back\",\n      src: \"/back.png\",\n      alt: \"\",\n      onClick: () => handleViewContents(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, this), fileArray.map(fileObj => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => handleGetImg(fileObj.path_lower),\n          children: fileObj.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }, this)\n      }, void 0, false);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: imgThumbnail ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imgThumbnail,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 5\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ImgView, \"PZ+PYAT0ZCOHsVcBaEz5bdi5AM8=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = ImgView;\nexport default ImgView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImgView\");","map":{"version":3,"sources":["/Users/hunterhutchisson/inerg/poc-hh/src/components/ImgView.jsx"],"names":["React","useEffect","useState","useDispatch","useSelector","loadDropboxData","Dropbox","ImgView","handleViewContents","dispatch","fileArray","state","dropbox","dropboxFileArray","imageArray","thumbnailArray","imgThumbnail","setImgThumbnail","imgThumbnailPath","setImgThumbnailPath","handleGetImg","path","dbx","accessToken","ACC","filesGetThumbnailBatch","entries","size","then","res","console","log","result","thumbnail","catch","error","err","map","fileObj","path_lower","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAASC,eAAT,QAAgC,YAAhC;AACA,SAASC,OAAT,QAAwB,SAAxB;;;;AAGA,SAASC,OAAT,OAAuC;AAAA;;AAAA,MAAtB;AAACC,IAAAA;AAAD,GAAsB;AACrC,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,SAAS,GAAGN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACC,OAAN,CAAcC,gBAAxB,CAA7B;AACA,QAAMC,UAAU,GAAGV,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACC,OAAN,CAAcG,cAAxB,CAA9B;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACgB,gBAAD,EAAmBC,mBAAnB,IAA0CjB,QAAQ,CAAC,IAAD,CAAxD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,QAAQ,CAACJ,eAAe,EAAhB,CAAR;AACD,GAFQ,EAEN,EAFM,CAAT;;AAKA,QAAMe,YAAY,GAAIC,IAAD,IAAU;AAC7B,QAAG,CAACL,YAAD,IAAiBK,IAAI,IAAIH,gBAA5B,EAA6C;AAC3C,UAAG;AACD,YAAII,GAAG,GAAG,IAAIhB,OAAJ,CAAY;AAClBiB,UAAAA,WAAW,EAAEC;AADK,SAAZ,CAAV;AAGAF,QAAAA,GAAG,CAACG,sBAAJ,CAA2B;AACnBC,UAAAA,OAAO,EAAE,CACP;AAACL,YAAAA,IAAI,EAAE,GAAEA,IAAK,EAAd;AACAM,YAAAA,IAAI,EAAE;AADN,WADO;AADU,SAA3B,EAMAC,IANA,CAMKC,GAAG,IAAI;AACVC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAZ,UAAAA,eAAe,CAAE,2BAA0BY,GAAG,CAACG,MAAJ,CAAWN,OAAX,CAAmB,CAAnB,EAAsBO,SAAU,EAA5D,CAAf;AACAd,UAAAA,mBAAmB,CAACE,IAAD,CAAnB;AACD,SAVD,EAWCa,KAXD,CAWO,UAASC,KAAT,EAAgB;AACnBL,UAAAA,OAAO,CAACK,KAAR,CAAcA,KAAd;AACH,SAbD;AAcH,OAlBC,CAkBA,OAAMC,GAAN,EAAU;AACRN,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBK,GAApB;AACH;AACA,KAtBD,MAsBO;AACHnB,MAAAA,eAAe,CAAC,IAAD,CAAf;AACH;AACF,GA1BD;;AA4BA,sBACE;AAAA,4BACA;AAAK,MAAA,SAAS,EAAC,MAAf;AAAsB,MAAA,GAAG,EAAC,WAA1B;AAAsC,MAAA,GAAG,EAAC,EAA1C;AAA6C,MAAA,OAAO,EAAE,MAAIT,kBAAkB,CAAC,KAAD;AAA5E;AAAA;AAAA;AAAA;AAAA,YADA,EAECE,SAAS,CAAC2B,GAAV,CAAcC,OAAO,IAAE;AACtB,0BACE;AAAA,+BACA;AAAK,UAAA,OAAO,EAAE,MAAIlB,YAAY,CAACkB,OAAO,CAACC,UAAT,CAA9B;AAAA,oBAAqDD,OAAO,CAACE;AAA7D;AAAA;AAAA;AAAA;AAAA;AADA,uBADF;AAKD,KANA,CAFD,eASA;AAAA,gBAAMxB,YAAY,gBAElB;AAAK,QAAA,GAAG,EAAEA,YAAV;AAAwB,QAAA,GAAG,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,cAFkB,GAIlB;AAJA;AAAA;AAAA;AAAA;AAAA,YATA;AAAA,kBADF;AAkBD;;GA1DQT,O;UACUJ,W,EACCC,W,EACCA,W;;;KAHZG,O;AA4DT,eAAeA,OAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport { loadDropboxData } from \"../actions\";\nimport { Dropbox } from \"dropbox\"\n\n\nfunction ImgView({handleViewContents}) {\n  const dispatch = useDispatch();\n  const fileArray = useSelector(state => state.dropbox.dropboxFileArray)\n  const imageArray = useSelector(state => state.dropbox.thumbnailArray)\n  const [imgThumbnail, setImgThumbnail] = useState(null);\n  const [imgThumbnailPath, setImgThumbnailPath] = useState(null);\n\n  useEffect(() => {\n    dispatch(loadDropboxData())\n  }, [])\n\n\n  const handleGetImg = (path) => {\n    if(!imgThumbnail || path != imgThumbnailPath){\n      try{\n        let dbx = new Dropbox({ \n            accessToken: ACC\n        });\n        dbx.filesGetThumbnailBatch({\n                entries :[\n                  {path:`${path}`,\n                  size: \"w1024h768\"}\n              ]\n        }).\n        then(res => {\n          console.log(res);\n          setImgThumbnail(`data:image/jpeg;base64, ${res.result.entries[0].thumbnail}`)\n          setImgThumbnailPath(path)\n        })\n        .catch(function(error) {\n            console.error(error);\n        });\n    } catch(err){\n        console.log('err:', err)\n    }\n    } else {\n        setImgThumbnail(null)\n    }\n  };\n  \n  return (\n    <>\n    <img className=\"back\" src=\"/back.png\" alt=\"\" onClick={()=>handleViewContents(false)}/>\n    {fileArray.map(fileObj=>{\n      return( \n        <>\n        <div onClick={()=>handleGetImg(fileObj.path_lower)}>{fileObj.name}</div>\n        </>\n      )\n    })}\n    <div>{imgThumbnail\n    ?\n    <img src={imgThumbnail} alt=\"\" />\n    :\n    null\n  }</div>\n    </>\n  )\n}\n\nexport default ImgView"]},"metadata":{},"sourceType":"module"}